import '@redwoodjs/api'
import '@redwoodjs/auth'

import { getCurrentUser } from '../../../api/src/lib/auth'

type ThenArg<T> = T extends PromiseLike<infer U> ? U : T
export type InferredCurrentUser = ThenArg<ReturnType<typeof getCurrentUser>>

type UndefinedRoles = {
  /**
   * ⚠️ Heads-Up: This is undefined unless `roles: true` is added to the `select: {…}`
   * object in {@link getCurrentUser()}.
   *
   * You may look into to https://redwoodjs.com/docs/tutorial/chapter7/rbac for a tutorial on
   * how to add fully-fledged RBAC (Role-based Access Control) to your database model.
   */
  roles?: unknown | unknown[]
}

type Overwrite<T, U> = Omit<T, keyof U> & U

declare module '@redwoodjs/graphql-server' {
  interface GlobalContext {
    currentUser?: Overwrite<UndefinedRoles, InferredCurrentUser>
  }
}

declare module '@redwoodjs/auth' {
  interface CurrentUser extends InferredCurrentUser {}
}
